<#
    .NOTES
    --------------------------------------------------------------------------------
     Generated by:       Pashkov-KM
    --------------------------------------------------------------------------------
#>


#region Source: Startup.pss
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

function Main {
	Param ([String]$Commandline)
	
	if((Call-MainForm_psf) -eq "OK")
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$buttonFind = New-Object 'System.Windows.Forms.Button'
	$groupboxServer = New-Object 'System.Windows.Forms.GroupBox'
	$labelCollection = New-Object 'System.Windows.Forms.Label'
	$labelDatabase = New-Object 'System.Windows.Forms.Label'
	$comboboxCollections = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxDatabases = New-Object 'System.Windows.Forms.ComboBox'
	$groupboxFind = New-Object 'System.Windows.Forms.GroupBox'
	$datetimepickerValue = New-Object 'System.Windows.Forms.DateTimePicker'
	$textboxValue = New-Object 'System.Windows.Forms.TextBox'
	$labelLimit = New-Object 'System.Windows.Forms.Label'
	$textboxDataType = New-Object 'System.Windows.Forms.TextBox'
	$labelValue = New-Object 'System.Windows.Forms.Label'
	$numericupdownSetLimit = New-Object 'System.Windows.Forms.NumericUpDown'
	$labelKey = New-Object 'System.Windows.Forms.Label'
	$labelDataType = New-Object 'System.Windows.Forms.Label'
	$radiobuttonOR = New-Object 'System.Windows.Forms.RadioButton'
	$listboxCondition = New-Object 'System.Windows.Forms.ListBox'
	$buttonAdd = New-Object 'System.Windows.Forms.Button'
	$radiobuttonAND = New-Object 'System.Windows.Forms.RadioButton'
	$comboboxCondition = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxKey = New-Object 'System.Windows.Forms.ComboBox'
	$contextmenustripCondition = New-Object 'System.Windows.Forms.ContextMenuStrip'
	$deleteDelToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$removeAllToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$OnLoadFormEvent = {
		if (-not ((Test-Path $XMLPath -ErrorAction 'SilentlyContinue')))
		{
			New-Xml
		}
		if (Load-Prerequisites -Configuration $XMLConfiguration)
		{
			Set-Connection -Configuration $XMLConfiguration
		}
	}
	
	$buttonAdd_Click = {
		if ($textboxDataType.Text -eq 'DateTime')
		{
			$value = Get-Date -Date $($datetimepickerValue.Value.ToShortDateString()) -Format s
		}
		else
		{
			$value = $textboxValue.Text.Trim()
		}
		if (-not [System.String]::IsNullOrEmpty($comboboxKey.Text.Trim()) -and (-not [System.String]::IsNullOrEmpty($value)))
		{
			Check-InputFilterTypeValue -InputType $textboxDataType.Text.Trim() -InputValue $value
			if ($global:DataTypeCheck)
			{
				$condition = '[{0}]' -f $textboxDataType.Text.Trim() + [Char]9 + $comboboxKey.Text.Trim() + [Char]9 + $comboboxCondition.Text.Trim() + [Char]9 + $value
				if ($listboxCondition.Items.Count -eq 0)
				{
					$listboxCondition.Items.Add($condition)
				}
				else
				{
					$exists = $false
					$i = 0
					foreach ($item in [array]$listboxCondition.Items)
					{
						if ($item.ToString() -eq $condition)
						{
							$exists = $true
							$index = $i
						}
						$i++
					}
					if ($exists)
					{
						$listboxCondition.SelectedIndex = $index
					}
					else
					{
						$listboxCondition.Items.Add($condition)
						if ($listboxCondition.Items.Count -gt 1)
						{
							$radiobuttonAND.Visible = $true
							$radiobuttonOR.Visible = $true
						}
						else
						{
							$radiobuttonAND.Visible = $false
							$radiobuttonOR.Visible = $false
						}
					}
				}
			}
			else
			{
				[void][System.Windows.Forms.MessageBox]::Show($global:DataTypeCheckError, "Error")
				$textboxValue.Focus()
			}
		}
		else
		{
			$textboxValue.Focus()
		}	
	}
	
	$formMain_FormClosed = [System.Windows.Forms.FormClosedEventHandler]{
		$global:mongoConnection.Disconnect()
		$global:mongoConnection = $null
	}
	
	$listboxCondition_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Delete)
		{
			$_.SuppressKeyPress = $true
			if ($listboxCondition.SelectedItem -ne $null)
			{
				$listboxCondition.Items.RemoveAt($listboxCondition.SelectedIndex)
				if ($listboxCondition.Items.Count -gt 0)
				{
					$listboxCondition.SelectedIndex = 0
				}
			}
		}
	}
	
	$contextmenustripCondition_Opening = [System.ComponentModel.CancelEventHandler]{
		if ($listboxCondition.SelectedIndex -eq -1)
		{
			$_.Cancel = $true
		}
		if ($listboxCondition.Items.Count -gt 1)
		{
			$removeAllToolStripMenuItem.Visible = $true
		}
		else
		{
			$removeAllToolStripMenuItem.Visible = $false
		}
	}
	
	$deleteDelToolStripMenuItem_Click = {
		$listboxCondition.Items.RemoveAt($listboxCondition.SelectedIndex)
		if ($listboxCondition.Items.Count -gt 1)
		{
			$radiobuttonAND.Visible = $true
			$radiobuttonOR.Visible = $true
		}
		else
		{
			$radiobuttonAND.Visible = $false
			$radiobuttonOR.Visible = $false
		}
	}
	
	$comboboxDatabases_SelectedIndexChanged = {
		Set-ElemenetState -State 'Off'
		$comboboxCollections.Items.Clear()
		[MongoDB.Driver.MongoDatabase]$database = $global:mongoConnection.GetDatabase($comboboxDatabases.Text)
		[String[]]$collection = $database.GetCollectionNames()
		if ($collection.Count -gt 0)
		{
			$comboboxCollections.Enabled = $true
			$comboboxCollections.Items.AddRange($collection)
			$comboboxCollections.SelectedItem = $comboboxCollections.Items[0]
		}
		else
		{
			$labelCollection.Text = 'Collection'
			$comboboxCollections.Enabled = $false
		}
		$database = $null
	}
	
	$comboboxCollections_SelectedIndexChanged = {
		[MongoDB.Driver.MongoDatabase]$database = $global:mongoConnection.GetDatabase($comboboxDatabases.Text)
		[MongoDB.Driver.MongoCollection]$collection = $database.GetCollection($comboboxCollections.Text)
		[int]$records = $collection.Count()
		$labelCollection.Text = 'Collection (Records: {0})' -f $records.ToString()
		if ($records -gt 0)
		{
			$buttonFind.Enabled = $true
			$global:hashtabledatatype = New-Object System.Collections.Specialized.OrderedDictionary
			$document = $collection.FindOne()
				foreach ($piece in $document)
				{
					$name = $piece.Name
					$datatype = $document[$name].BsonType
					$global:hashtabledatatype[$name] = $datatype
				}
			Set-ElemenetState -State 'On'
		}
		else
		{
			Set-ElemenetState -State 'Off'		
		}
	}
	
	$comboboxKey_KeyDown = [System.Windows.Forms.KeyEventHandler]{
		if ($_.KeyCode -eq [System.Windows.Forms.Keys]::Enter)
		{ & $buttonAdd_Click }
	}
	
	$removeAllToolStripMenuItem_Click = {
		$listboxCondition.Items.Clear()
		$radiobuttonAND.Visible = $false
		$radiobuttonOR.Visible = $false
	}
	
	$comboboxKey_SelectedIndexChanged = {
		if ($global:hashtabledatatype[$comboboxKey.Text])
		{
			$textboxDataType.Text = $global:hashtabledatatype[$comboboxKey.Text]
			if ($global:hashtabledatatype[$comboboxKey.Text] -eq 'DateTime')
			{
				$textboxValue.Visible = $false
				$datetimepickerValue.Visible = $true
			}
			else
			{
				$textboxValue.Visible = $true
				$datetimepickerValue.Visible = $false
			}
		}
	}
	
	$buttonFind_Click = {
		$buttonFind.Enabled = $false
		[MongoDB.Driver.MongoDatabase]$database = $global:mongoConnection.GetDatabase($comboboxDatabases.Text)
		[MongoDB.Driver.MongoCollection]$collection = $database.GetCollection($comboboxCollections.Text)
		[int]$total = $listboxCondition.Items.Count
		
		if ($total -gt 0)
		{
			if ($total -eq 1)
			{
				Get-QueryElements -FilterElement $($listboxCondition.Items[0].ToString())
				$sbs = "{0}::Create('{1}')" -f $global:QEDataType, $global:QEValue
				$sb = [ScriptBlock]::Create($sbs)
				[MongoDB.Bson.BsonValue]$queryelement = $sb.InvokeReturnAsIs()
				switch ($global:QEComparisonOperator)
				{
					'EQ'{
						[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::EQ($global:QEKey, $queryelement)
						break
					}
					'NE'{
						[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::NE($global:QEKey, $queryelement)
						break
					}
					'GT'{
						[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::GT($global:QEKey, $queryelement)
						break
					}
					'GTE'{
						[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::GTE($global:QEKey, $queryelement)
						break
					}
					'LT'{
						[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::LT($global:QEKey, $queryelement)
						break
					}
					'LTE'{
						[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::LTE($global:QEKey, $queryelement)
						break
					}
				}
			}
			else
			{
				$sbfilter = New-Object System.Text.StringBuilder
				$i = 0
				foreach ($item in $listboxCondition.Items)
				{
					Get-QueryElements -FilterElement $item
					
					$sbfilter.Append($("[MongoDB.Driver.Builders.Query]::{0}('{1}'," -f $global:QEComparisonOperator, $global:QEKey))
					$sbfilter.Append($("{0}::Create('{1}')" -f $global:QEDataType, $global:QEValue))
					$sbfilter.Append(')')
					$i++
					
					if ($i -lt $total)
					{
						$sbfilter.Append(',')
					}
				}
				$sbquery = [ScriptBlock]::Create($sbfilter.ToString())
				
				[MongoDB.Driver.IMongoQuery[]]$query = $sbquery.InvokeReturnAsIs()
				
				if ($radiobuttonAND.Checked -eq $true)
				{
					[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::And($query)
				}
				if ($radiobuttonOR.Checked -eq $true)
				{
					[MongoDB.Bson.BsonDocument]$query = [MongoDB.Driver.Builders.Query]::Or($query)
				}
			}
			$recordset = $collection.Find($query).SetLimit($numericupdownSetLimit.Value)
		}
		else
		{
			$recordset = $collection.FindAll().SetLimit($numericupdownSetLimit.Value)
		}
		if ($recordset.Size() -gt 0)
		{
			$resultset = New-Object -TypeName System.Collections.ArrayList
			foreach ($item in $recordset)
			{
				$hashtable = New-Object System.Collections.Specialized.OrderedDictionary
				foreach ($element in $item)
				{
					$hashtable[$element.Name] = $item[$element.Name].Value
				}
				$object = New-Object PSObject -Property $hashtable
				[void]$resultset.Add($object)
			}
			Call-Results_psf -DataSource $resultset
		}
		else
		{
			[void][System.Windows.Forms.MessageBox]::Show('No records found', 'Information')
		}
		$buttonFind.Enabled = $true
	}	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_comboboxCollections_SelectedItem = $comboboxCollections.SelectedItems
		$script:MainForm_comboboxDatabases_SelectedItem = $comboboxDatabases.SelectedItems
		$script:MainForm_datetimepickerValue = $datetimepickerValue.Value
		$script:MainForm_textboxValue = $textboxValue.Text
		$script:MainForm_textboxDataType = $textboxDataType.Text
		$script:MainForm_numericupdownSetLimit = $numericupdownSetLimit.Value
		$script:MainForm_radiobuttonOR = $radiobuttonOR.Checked
		$script:MainForm_listboxCondition = $listboxCondition.SelectedItems
		$script:MainForm_radiobuttonAND = $radiobuttonAND.Checked
		$script:MainForm_comboboxCondition_SelectedItem = $comboboxCondition.SelectedItems
		$script:MainForm_comboboxKey = $comboboxKey.Text
		$script:MainForm_comboboxKey_SelectedItem = $comboboxKey.SelectedItems
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonFind.remove_Click($buttonFind_Click)
			$comboboxCollections.remove_SelectedIndexChanged($comboboxCollections_SelectedIndexChanged)
			$comboboxDatabases.remove_SelectedIndexChanged($comboboxDatabases_SelectedIndexChanged)
			$datetimepickerValue.remove_KeyDown($comboboxKey_KeyDown)
			$textboxValue.remove_KeyDown($comboboxKey_KeyDown)
			$listboxCondition.remove_KeyDown($listboxCondition_KeyDown)
			$buttonAdd.remove_Click($buttonAdd_Click)
			$comboboxKey.remove_SelectedIndexChanged($comboboxKey_SelectedIndexChanged)
			$comboboxKey.remove_TextChanged($comboboxKey_SelectedIndexChanged)
			$comboboxKey.remove_KeyDown($comboboxKey_KeyDown)
			$MainForm.remove_FormClosed($formMain_FormClosed)
			$MainForm.remove_Load($OnLoadFormEvent)
			$contextmenustripCondition.remove_Opening($contextmenustripCondition_Opening)
			$deleteDelToolStripMenuItem.remove_Click($deleteDelToolStripMenuItem_Click)
			$removeAllToolStripMenuItem.remove_Click($removeAllToolStripMenuItem_Click)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupboxServer.SuspendLayout()
	$groupboxFind.SuspendLayout()
	$numericupdownSetLimit.BeginInit()
	#
	# MainForm
	#
	$MainForm.Controls.Add($buttonFind)
	$MainForm.Controls.Add($groupboxServer)
	$MainForm.Controls.Add($groupboxFind)
	$MainForm.ClientSize = '438, 331'
	$MainForm.FormBorderStyle = 'FixedDialog'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAABILAAASCwAAAAAA
AAAAAAAAAAAA4Kc8UuOuTfniq1f23qdb89ujXfPWmVHz0ZJE882LPfPJhTjzwn0y8790K/O5bCPz
tmYc/6VUFsCfTBZLAAAAAOStSev66LP//e3D///77/////////Te//jlrP/54I3/+duD//LMaf/r
vE7/5Ks0/+agHP/FdxP/pFIV2QAAAADlq0jj+OOt//bbpP/46M3/+u/j//Xfvv/v0ZT/78x5/+7H
cv/nuVz/4atG/9udMf/bkxz/xHgT/6NTFc8AAAAA5K1L4/vpu//54Kv/++7Z//z18P/45cj/8taa
//PRf//xzHb/675e/+WvRf/cni//3pUZ/8V5FP+jUxbPAAAAAOSqRej026f/9d6x//XlyP/36dj/
8t26/+7Snf/tzIr/7MqB/+a/cf/jtmD/3KpN/96nOf+9cx3/pFEU1gAAAADgpzxG5bVX/+a5ZP/i
tmv/4Ld2/9qqXf/Wnkv/05hE/86QP//Khzj/w3wy/71xK/+6biP/oU8WxJ1LFT0AAAAA6b5n2Prn
tf/34Kz/++7Z//328f/45Mf/8dac//PRf//xzXX/675f/+OtRv/dnS7/3JQX/8h9Ev+vXxXHAAAA
AOq/ZuT44aj/996q//nq0v/78en/9uHC/+/TmP/wzn3/78p2/+i7X//ir0j/3KAy/9mSHP/GehT/
sF4U0AAAAADqv2fk+OKr//fdov/56tD/+/Hn//bhv//v0pP/8Mx1/+/Ib//ouVj/4KpA/9qaKv/Y
jhT/xncO/7BeEtAAAAAA6sBp2Prry//45b7/+u3c//v17//56M//9dys//PXmf/y1Y//7Mp8/+i+
Z//hsVD/4aw6/82NJv+yZBnHAAAAAOKsQkbnu2X/6b96/+bChf/kwo//3rNx/9mmW//Wn1T/0ptN
/82QRf/IiT7/w301/8B9Lf+uYiHEpVQaPQAAAADnuF3o9+Gk//fepP/46c//+vHn//bhvf/x05P/
8c54//DJb//pulr/46tD/92aLf/akBf/wnMR/6paFNYAAAAA68Jp4/jjrf/34Kz/++vV//zz6//5
48X/8NWa//DQf//wy3j/6r1g/+SvSf/eoDP/25Uc/8h9FP+yYhTPAAAAAOrAZ+P436b/99yh//jn
zP/67+L/99+8/+/Rj//ty3T/7cZt/+a3Vv/gqD//2pgp/9eMFP/Fdg7/sF4TzwAAAADqv2nr/PHP
//zrxv//+O7///////7x3//35bf/9+Cc//bclP/x0H3/68Rk/+azTP/mrDT/z4sh/7JhFtkAAAAA
5a9JUurBcvnpw4D25sCB8+S/hfPhtXfz3rBt89qpZPPWpGHz0p1a88+XU/PKj0nzyJBA/7RtKMCp
VxlLgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAAAACAAAAAgAAAAIAA
AACAAAAAgAAAAA==')
	#endregion
	$MainForm.MaximizeBox = $False
	$MainForm.MinimizeBox = $False
	$MainForm.Name = "MainForm"
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = "PSMongo"
	$MainForm.add_FormClosed($formMain_FormClosed)
	$MainForm.add_Load($OnLoadFormEvent)
	#
	# buttonFind
	#
	$buttonFind.Enabled = $False
	$buttonFind.Location = '12, 298'
	$buttonFind.Name = "buttonFind"
	$buttonFind.Size = '412, 25'
	$buttonFind.TabIndex = 14
	$buttonFind.Text = "Find"
	$buttonFind.UseVisualStyleBackColor = $True
	$buttonFind.add_Click($buttonFind_Click)
	#
	# groupboxServer
	#
	$groupboxServer.Controls.Add($labelCollection)
	$groupboxServer.Controls.Add($labelDatabase)
	$groupboxServer.Controls.Add($comboboxCollections)
	$groupboxServer.Controls.Add($comboboxDatabases)
	$groupboxServer.Enabled = $False
	$groupboxServer.Location = '12, 12'
	$groupboxServer.Name = "groupboxServer"
	$groupboxServer.Size = '412, 73'
	$groupboxServer.TabIndex = 11
	$groupboxServer.TabStop = $False
	$groupboxServer.Text = "Server:"
	#
	# labelCollection
	#
	$labelCollection.Location = '212, 16'
	$labelCollection.Name = "labelCollection"
	$labelCollection.Size = '190, 23'
	$labelCollection.TabIndex = 11
	$labelCollection.Text = "Collection"
	$labelCollection.TextAlign = 'BottomLeft'
	#
	# labelDatabase
	#
	$labelDatabase.Location = '6, 16'
	$labelDatabase.Name = "labelDatabase"
	$labelDatabase.Size = '190, 23'
	$labelDatabase.TabIndex = 10
	$labelDatabase.Text = "Database"
	$labelDatabase.TextAlign = 'BottomLeft'
	#
	# comboboxCollections
	#
	$comboboxCollections.DropDownStyle = 'DropDownList'
	$comboboxCollections.Enabled = $False
	$comboboxCollections.FormattingEnabled = $True
	$comboboxCollections.Location = '212, 42'
	$comboboxCollections.Name = "comboboxCollections"
	$comboboxCollections.Size = '190, 21'
	$comboboxCollections.TabIndex = 9
	$comboboxCollections.add_SelectedIndexChanged($comboboxCollections_SelectedIndexChanged)
	#
	# comboboxDatabases
	#
	$comboboxDatabases.DropDownStyle = 'DropDownList'
	$comboboxDatabases.Enabled = $False
	$comboboxDatabases.FormattingEnabled = $True
	$comboboxDatabases.Location = '6, 42'
	$comboboxDatabases.Name = "comboboxDatabases"
	$comboboxDatabases.Size = '190, 21'
	$comboboxDatabases.TabIndex = 0
	$comboboxDatabases.add_SelectedIndexChanged($comboboxDatabases_SelectedIndexChanged)
	#
	# groupboxFind
	#
	$groupboxFind.Controls.Add($datetimepickerValue)
	$groupboxFind.Controls.Add($textboxValue)
	$groupboxFind.Controls.Add($labelLimit)
	$groupboxFind.Controls.Add($textboxDataType)
	$groupboxFind.Controls.Add($labelValue)
	$groupboxFind.Controls.Add($numericupdownSetLimit)
	$groupboxFind.Controls.Add($labelKey)
	$groupboxFind.Controls.Add($labelDataType)
	$groupboxFind.Controls.Add($radiobuttonOR)
	$groupboxFind.Controls.Add($listboxCondition)
	$groupboxFind.Controls.Add($buttonAdd)
	$groupboxFind.Controls.Add($radiobuttonAND)
	$groupboxFind.Controls.Add($comboboxCondition)
	$groupboxFind.Controls.Add($comboboxKey)
	$groupboxFind.ContextMenuStrip = $contextmenustripCondition
	$groupboxFind.Enabled = $False
	$groupboxFind.Location = '12, 91'
	$groupboxFind.Name = "groupboxFind"
	$groupboxFind.Size = '412, 201'
	$groupboxFind.TabIndex = 7
	$groupboxFind.TabStop = $False
	$groupboxFind.Text = "Find Options"
	#
	# datetimepickerValue
	#
	$datetimepickerValue.Format = 'Short'
	$datetimepickerValue.Location = '241, 97'
	$datetimepickerValue.Name = "datetimepickerValue"
	$datetimepickerValue.Size = '120, 20'
	$datetimepickerValue.TabIndex = 14
	$datetimepickerValue.Visible = $False
	$datetimepickerValue.add_KeyDown($comboboxKey_KeyDown)
	#
	# textboxValue
	#
	$textboxValue.Enabled = $False
	$textboxValue.Location = '241, 97'
	$textboxValue.Name = "textboxValue"
	$textboxValue.Size = '120, 20'
	$textboxValue.TabIndex = 13
	$textboxValue.add_KeyDown($comboboxKey_KeyDown)
	#
	# labelLimit
	#
	$labelLimit.Location = '349, 19'
	$labelLimit.Name = "labelLimit"
	$labelLimit.Size = '57, 20'
	$labelLimit.TabIndex = 13
	$labelLimit.Text = "Limit"
	$labelLimit.TextAlign = 'BottomLeft'
	#
	# textboxDataType
	#
	$textboxDataType.Enabled = $False
	$textboxDataType.Location = '6, 98'
	$textboxDataType.Name = "textboxDataType"
	$textboxDataType.Size = '70, 20'
	$textboxDataType.TabIndex = 12
	#
	# labelValue
	#
	$labelValue.Location = '241, 80'
	$labelValue.Name = "labelValue"
	$labelValue.Size = '122, 16'
	$labelValue.TabIndex = 9
	$labelValue.Text = "Value"
	$labelValue.TextAlign = 'BottomLeft'
	#
	# numericupdownSetLimit
	#
	$numericupdownSetLimit.Enabled = $False
	$numericupdownSetLimit.Location = '349, 42'
	$numericupdownSetLimit.Maximum = 5000
	$numericupdownSetLimit.Minimum = 1
	$numericupdownSetLimit.Name = "numericupdownSetLimit"
	$numericupdownSetLimit.Size = '57, 20'
	$numericupdownSetLimit.TabIndex = 12
	$numericupdownSetLimit.Value = 100
	#
	# labelKey
	#
	$labelKey.Location = '77, 80'
	$labelKey.Name = "labelKey"
	$labelKey.Size = '121, 16'
	$labelKey.TabIndex = 8
	$labelKey.Text = "Key"
	$labelKey.TextAlign = 'BottomLeft'
	#
	# labelDataType
	#
	$labelDataType.Location = '6, 81'
	$labelDataType.Name = "labelDataType"
	$labelDataType.Size = '70, 16'
	$labelDataType.TabIndex = 11
	$labelDataType.Text = "Data type"
	$labelDataType.TextAlign = 'BottomLeft'
	#
	# radiobuttonOR
	#
	$radiobuttonOR.Location = '6, 49'
	$radiobuttonOR.Name = "radiobuttonOR"
	$radiobuttonOR.Size = '50, 24'
	$radiobuttonOR.TabIndex = 7
	$radiobuttonOR.Text = "Or"
	$radiobuttonOR.UseVisualStyleBackColor = $True
	$radiobuttonOR.Visible = $False
	#
	# listboxCondition
	#
	$listboxCondition.ContextMenuStrip = $contextmenustripCondition
	$listboxCondition.Enabled = $False
	$listboxCondition.FormattingEnabled = $True
	$listboxCondition.Location = '6, 125'
	$listboxCondition.Name = "listboxCondition"
	$listboxCondition.Size = '396, 69'
	$listboxCondition.TabIndex = 3
	$listboxCondition.add_KeyDown($listboxCondition_KeyDown)
	#
	# buttonAdd
	#
	$buttonAdd.Enabled = $False
	$buttonAdd.Location = '361, 97'
	$buttonAdd.Name = "buttonAdd"
	$buttonAdd.Size = '41, 21'
	$buttonAdd.TabIndex = 4
	$buttonAdd.Text = "Add"
	$buttonAdd.UseVisualStyleBackColor = $True
	$buttonAdd.add_Click($buttonAdd_Click)
	#
	# radiobuttonAND
	#
	$radiobuttonAND.Checked = $True
	$radiobuttonAND.Location = '6, 19'
	$radiobuttonAND.Name = "radiobuttonAND"
	$radiobuttonAND.Size = '50, 24'
	$radiobuttonAND.TabIndex = 6
	$radiobuttonAND.TabStop = $True
	$radiobuttonAND.Text = "And"
	$radiobuttonAND.UseVisualStyleBackColor = $True
	$radiobuttonAND.Visible = $False
	#
	# comboboxCondition
	#
	$comboboxCondition.DropDownStyle = 'DropDownList'
	$comboboxCondition.FormattingEnabled = $True
	$comboboxCondition.Location = '199, 97'
	$comboboxCondition.Name = "comboboxCondition"
	$comboboxCondition.Size = '40, 21'
	$comboboxCondition.TabIndex = 2
	#
	# comboboxKey
	#
	$comboboxKey.Enabled = $False
	$comboboxKey.FormattingEnabled = $True
	$comboboxKey.Location = '77, 97'
	$comboboxKey.Name = "comboboxKey"
	$comboboxKey.Size = '121, 21'
	$comboboxKey.TabIndex = 0
	$comboboxKey.add_SelectedIndexChanged($comboboxKey_SelectedIndexChanged)
	$comboboxKey.add_TextChanged($comboboxKey_SelectedIndexChanged)
	$comboboxKey.add_KeyDown($comboboxKey_KeyDown)
	#
	# contextmenustripCondition
	#
	[void]$contextmenustripCondition.Items.Add($deleteDelToolStripMenuItem)
	[void]$contextmenustripCondition.Items.Add($removeAllToolStripMenuItem)
	$contextmenustripCondition.Name = "contextmenustripCondition"
	$contextmenustripCondition.ShowImageMargin = $False
	$contextmenustripCondition.Size = '139, 48'
	$contextmenustripCondition.add_Opening($contextmenustripCondition_Opening)
	#
	# deleteDelToolStripMenuItem
	#
	$deleteDelToolStripMenuItem.Name = "deleteDelToolStripMenuItem"
	$deleteDelToolStripMenuItem.Size = '138, 22'
	$deleteDelToolStripMenuItem.Text = "Remove selected"
	$deleteDelToolStripMenuItem.add_Click($deleteDelToolStripMenuItem_Click)
	#
	# removeAllToolStripMenuItem
	#
	$removeAllToolStripMenuItem.Name = "removeAllToolStripMenuItem"
	$removeAllToolStripMenuItem.Size = '138, 22'
	$removeAllToolStripMenuItem.Text = "Remove all"
	$removeAllToolStripMenuItem.Visible = $False
	$removeAllToolStripMenuItem.add_Click($removeAllToolStripMenuItem_Click)
	$numericupdownSetLimit.EndInit()
	$groupboxFind.ResumeLayout($false)
	$groupboxServer.ResumeLayout($false)
	$MainForm.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()
}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	$global:ErrorActionPreference = 'SilentlyContinue'
	$global:XMLPath = $(Join-Path -Path $PWD -ChildPath 'PSMongoConfig.xml')
	$global:XMLConfiguration = Get-Content $XMLPath 
	
	$global:ComparisonOperator = New-Object System.Collections.Specialized.OrderedDictionary
	$global:ComparisonOperator['='] = 'EQ'
	$global:ComparisonOperator['!='] = 'NE'
	$global:ComparisonOperator['>'] = 'GT'
	$global:ComparisonOperator['>='] = 'GTE'
	$global:ComparisonOperator['<'] = 'LT'
	$global:ComparisonOperator['<='] = 'LTE'
	
	function New-Xml
	{
		$xml = @'
<?xml version="1.0" encoding="windows-1251" ?>
<PSMongo>
    <DLLPath>
        <Bson>{0}</Bson>
        <Driver>{1}</Driver>
    </DLLPath>
    <Connection>
        <Host>{2}</Host>
        <Port>27017</Port>
    </Connection>
	<Option>
	</Option>
</PSMongo>
'@ -f $(Join-Path -Path $PWD -ChildPath 'MongoDB.Bson.dll'), $(Join-Path -Path $PWD -ChildPath 'MongoDB.Driver.dll'), $env:COMPUTERNAME
		$xml | Out-File $XMLPath -Force
		$global:XMLConfiguration = Get-Content $XMLPath
	}
	
	function Load-Prerequisites
	{
		param ($Configuration)
		$error_description = New-Object System.Text.StringBuilder
		$i = 0
		try
		{
			[xml]$xml = $Configuration
		}
		catch
		{
			$error_description.Append([System.Environment]::NewLine)
			$error_description.Append('- Bad XML format')
			$i++
		}
		if ($i -eq 0)
		{
			if ([System.String]::IsNullOrEmpty($xml.PSMongo.DLLPath.Bson))
			{
				$error_description.Append([System.Environment]::NewLine)
				$error_description.Append('- MongoDB.Bson.dll path is empty')
				$i++
			}
			else
			{
				$bson = Split-Path -Path $xml.PSMongo.DLLPath.Bson -Leaf 
				if ($bson -ne 'MongoDB.Bson.dll')
				{
					$error_description.Append([System.Environment]::NewLine)
					$error_description.Append([System.Environment]::NewLine)
					$error_description.Append($('- Wrong file: {0}.{1}MongoDB.Bson.dll expected' -f $bson, [Char]9))
					$i++
				}
				else
				{
					if (-not (Test-Path $($xml.PSMongo.DLLPath.Bson) ))
					{
						$error_description.Append([System.Environment]::NewLine)
						$error_description.Append('- MongoDB.Bson.dll not found at specified path')
						$i++
					}
					else
					{
						try
						{
							Add-Type -Path $($xml.PSMongo.DLLPath.Bson)
						}
						catch
						{
							$error_description.Append([System.Environment]::NewLine)
							$error_description.Append('- Error loading MongoDB.Bson.dll')
							$i++
						}
					}
				}
			}
			
			if ([System.String]::IsNullOrEmpty($xml.PSMongo.DLLPath.Driver))
			{
				$error_description.Append([System.Environment]::NewLine)
				$error_description.Append('- MongoDB.Driver.dll path is empty')
				$i++
			}
			else
			{
				$bson = Split-Path -Path $xml.PSMongo.DLLPath.Driver -Leaf 
				if ($bson -ne 'MongoDB.Driver.dll')
				{
					$error_description.Append([System.Environment]::NewLine)
					$error_description.Append([System.Environment]::NewLine)
					$error_description.Append($('- Wrong file: {0}.{1}MongoDB.Driver.dll expected' -f $bson, [Char]9))
					$i++
				}
				else
				{
					if (-not (Test-Path $($xml.PSMongo.DLLPath.Driver) ))
					{
						$error_description.Append([System.Environment]::NewLine)
						$error_description.Append('- MongoDB.Driver.dll not found at specified path')
						$i++
					}
					else
					{
						try
						{
							Add-Type -Path $($xml.PSMongo.DLLPath.Driver)
						}
						catch
						{
							$error_description.Append([System.Environment]::NewLine)
							$error_description.Append('- Error loading MongoDB.Driver.dll')
							$i++
						}
					}
				}
			}
		}
		if ($i -gt 0)
		{
			[void][System.Windows.Forms.MessageBox]::Show($error_description.ToString(), "Warning")
			return $false
		}
		else
		{
			return $true
		}
	}
	
	function Set-ElemenetState
	{
		param ([ValidateSet('On','Off')][String]$State)
		switch ($State)
		{
			'On' {
				$buttonAdd.Enabled = $true
				$textboxValue.Enabled = $true
				$listboxCondition.Enabled = $true
				$comboboxKey.Enabled = $true
				$textboxDataType.Enabled = $true
				$numericupdownSetLimit.Enabled = $true
				$buttonFind.Enabled = $true
				$comboboxKey.Items.Clear()
				$comboboxKey.Items.AddRange($global:hashtabledatatype.Keys)
				$comboboxKey.SelectedIndex = 0
				$comboboxCondition.Enabled = $true
				$comboboxCondition.Items.Clear()
				$comboboxCondition.Items.AddRange($global:ComparisonOperator.Keys)
				$comboboxCondition.SelectedIndex = 0
			}
			'Off' {
				$buttonAdd.Enabled = $false
				$textboxValue.Enabled = $false
				$listboxCondition.Enabled = $false
				$buttonFind.Enabled = $false
				$comboboxKey.Enabled = $false
				$comboboxCondition.Enabled = $false
				$textboxDataType.Enabled = $false
				$numericupdownSetLimit.Enabled = $false
				$buttonFind.Enabled = $false
				$textboxValue.Clear()
				$listboxCondition.Items.Clear()
				$textboxDataType.Clear()
				$comboboxCondition.Items.Clear()
				$comboboxKey.Items.Clear()
				$comboboxKey.Text = $null
			}
		}
	}
	
	function Get-QueryElements
	{
		param ([String]$FilterElement)
		[String[]]$Query_Filter = [regex]::Split($FilterElement, [Char]9)
		[String]$global:QEDataType = $query_filter[0].Replace('[', '[MongoDB.Bson.Bson')
		[String]$global:QEKey = $query_filter[1]
		[String]$global:QEComparisonOperator = $global:ComparisonOperator[$($query_filter[2])]
		[String]$global:QEValue = $query_filter[3]
	}
	
	function Set-Connection
	{
		param ($Configuration)
		[xml]$xml = $Configuration
		if ([System.String]::IsNullOrEmpty($xml.PSMongo.Connection.Host)) { $hostname = $env:COMPUTERNAME }
		else { $hostname = $xml.PSMongo.Connection.Host }
		if ([System.String]::IsNullOrEmpty($xml.PSMongo.Connection.Port)) { $port = '27017' }
		else { $port = $xml.PSMongo.Connection.Port }
		$global:XMLOption = New-Object System.Collections.Specialized.OrderedDictionary
		$xml.PSMongo.Option | Get-Member -MemberType Property | Select -ExpandProperty Name | ForEach-Object {
			$key = $_
			$value = $xml.PSMongo.Option | Select -ExpandProperty $key
			$global:XMLOption.Add($key, $value)
		}
		
		$mongoServer = '{0}:{1}' -f $hostname, $port
		
		$mongoClient = New-Object -TypeName MongoDB.Driver.MongoClient -ArgumentList $("mongodb://{0}" -f $mongoServer)
		$global:mongoConnection = $mongoClient.GetServer()
		$global:mongoConnection.Connect()
		
		if ($global:mongoConnection.State -eq 'Connected')
		{
			$groupboxServer.Text += " connected to {0}" -f $mongoServer
			$groupboxServer.Enabled = $true
			try
			{
				[array]$databases = $global:mongoConnection.GetDatabaseNames()
				if ($databases.Count -gt 0)
				{
					$comboboxDatabases.Enabled = $true
					$comboboxDatabases.Items.AddRange($databases)
					$comboboxDatabases.SelectedItem = $comboboxDatabases.Items[0]
					$groupboxFind.Enabled = $true
					if ([Int]$global:XMLOption['ResultLimit'] -gt 0)
					{
						$numericupdownSetLimit.Maximum = $global:XMLOption['ResultLimit']
					}
				}
				else
				{
					$comboboxDatabases.Enabled = $false
				}
				$databases = $null
			}
			catch
			{
				[void][System.Windows.Forms.MessageBox]::Show($Error[0].Exception.Message.ToString(), 'Error')
			}
		}
		else
		{
			$groupboxServer.Text += " failed to connect to {0}" -f $mongoServer
		}
	}
	
	function Check-InputFilterTypeValue
	{
		param ($InputType, $InputValue)
		$global:DataTypeCheck = $null
		$script = "[MongoDB.Bson.Bson{0}]::Create('{1}')" -f $InputType, $InputValue
		$sb = [ScriptBlock]::Create($script)
		try
		{
			$sb.InvokeReturnAsIs()
			$global:DataTypeCheck = $true
		}
		catch
		{
			$ErrorText = $_.Exception.Message.ToString()
			$global:DataTypeCheckError = New-Object System.Text.StringBuilder
			$global:DataTypeCheckError.Append($($ErrorText.Split(':', 3)[2] -replace [System.Char]34).ToString().Trim())
			$global:DataTypeCheckError.Append([System.Environment]::NewLine)
			$global:DataTypeCheckError.Append([System.Environment]::NewLine)
			$global:DataTypeCheckError.Append($('DataType: {0}' -f $InputType, $InputValue))
			$global:DataTypeCheckError.Append([System.Environment]::NewLine)
			$global:DataTypeCheckError.Append($('Value: {0}' -f $InputValue))
			$global:DataTypeCheck = $false
		}
	}
	
	function Export-Results
	{
		param (
			[System.Data.DataTable]$DataSet,
			[Int]$Number,
			[String]$Path
		)
		$psexcel = Test-Path -Path $(Join-Path $PWD 'PSExcel')
		if ($psexcel)
		{
			$array = New-Object -TypeName System.Collections.ArrayList
			[System.Array]$requiredfiles = 'EPPlus.dll', 'EPPlus.XML', 'PSExcel.psm1', 'PSExcel.psd1', 'Export-XLSX.ps1', 'New-Excel.ps1', 'Get-WorkSheet.ps1', 'Set-FreezePane.ps1', 'Format-Cell.ps1', 'Close-Excel.ps1'
			$modulefiles = Get-ChildItem $(Join-Path $PWD 'PSExcel') -Recurse | Select -ExpandProperty Name
			if ($modulefiles)
			{
				foreach ($modulefile in $modulefiles)
				{
					if ($modulefile) { [Void]$array.Add($modulefile.ToUpper()) }
				}
				$missingitems = 0
				foreach ($requiredfile in $requiredfiles)
				{
					if ($array.Contains($requiredfile.ToUpper()))
					{
						$excel = $true
					}
					else
					{
						$missingitems++
					}
				}
				if ($missingitems -gt 0)
				{
					$excel = $false
				}
			}
		}
		
		if (-not $Path)
		{
			if ($excel)
			{
				$extension = 'xlsx'
			}
			else
			{
				$extension = 'csv'
			}
			$Filename = '{0}_{1}_{2}.{3}' -f $comboboxDatabases.Text, $comboboxCollections.Text, $([System.DateTime]::Now.ToString('ddMMyyyy_HHmmss')), $extension
			$ExportRoot = $PWD
			if (-not([System.String]::IsNullOrEmpty($global:XMLOption['ExportRoot'])))
			{
				if (Test-Path $global:XMLOption['ExportRoot'])
				{
					$ExportRoot = $global:XMLOption['ExportRoot']
				}
			}
			$ExportFolder = Join-Path $ExportRoot 'Export'
			if (-not (Test-Path $ExportFolder)) { New-Item -Path $ExportFolder -ItemType Directory -Force}
			$Path = Join-Path $ExportFolder $filename
		}
		try
		{
			if ($excel)
			{
				Set-ExecutionPolicy -ExecutionPolicy 'Unrestricted' -Force
				Import-Module $(Join-Path $(Join-Path $PWD 'PSExcel') 'PSExcel.psm1')
				$DataSet | Select -Property * -ExcludeProperty RowError, RowState, Table, ItemArray, HasErrors | Export-XLSX -Path $Path -Table -Force
				$ExcelObject = New-Excel -Path $Path
				$ExcelObject | Get-WorkSheet | Set-FreezePane -Row 2
				$ExcelObject | Get-WorkSheet | Format-Cell -Header -Bold $True -Size 14
				$ExcelObject | Get-Worksheet | Format-Cell -StartColumn 1 -EndColumn $Number -Autofit
				$ExcelObject | Close-Excel -Save
			}
			else
			{
				$DataSet | Export-Csv $Path -NoTypeInformation -Delimiter ';'
			}
			switch ($global:XMLOption['OpenExport'])
			{
				'File' {
					$Process = New-Object System.Diagnostics.Process
					$Process.StartInfo.FileName = $Path
					$Process.Start()
				}
				default
				{
					$Process = New-Object System.Diagnostics.ProcessStartInfo
					$Process.FileName = 'explorer'
					$Process.Arguments = '/select, ' + $Path
					[System.Diagnostics.Process]::Start($Process)
				}
			}
		}
		catch
		{
			$_ | Out-File (Join-Path $PWD 'ErrorLog.txt') -Append
		}
	}#endregion Source: Globals.ps1

#region Source: Results.psf
function Call-Results_psf
{
param($DataSource)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Xml, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formResults = New-Object 'System.Windows.Forms.Form'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonClose = New-Object 'System.Windows.Forms.Button'
	$buttonExport = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	if ($global:XMLOption['ResultWindow'] -eq 'Maximized')
	{
		$formResults.WindowState = 'Maximized'
	}
	
	function OnApplicationLoad {
		return $true #return true for success or false for failure
	}
	
	
	function OnApplicationExit {
		$script:ExitCode = 0 #Set the exit code for the Packager
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if($seachString -eq "")
		{
			return
		}
		
		if($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for(;$RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
		
	}
	
	$FormEvent_Load={
		$Source = ConvertTo-DataTable -InputObject $DataSource
		$datagridviewResults.DataSource = $Source
		$formResults.Text = $('Records displayed: {0}. (Results limited to: {1})' -f $datagridviewResults.RowCount, $numericupdownSetLimit.Value)
	}
	
	$buttonClose_Click={
		$formResults.Close()
	}
	
	$buttonExport_Click={
		Export-Results -DataSet $datagridviewResults.DataSource -Number $datagridviewResults.ColumnCount
	}
	
	$buttonSearch_Click={
		SearchGrid
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
		if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
		{
			SearchGrid	
			$_.SuppressKeyPress = $true
		}
	}
	
	$datagridviewResults_DataError = [System.Windows.Forms.DataGridViewDataErrorEventHandler]{
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formResults.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:Results_textboxSearch = $textboxSearch.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$datagridviewResults.remove_DataError($datagridviewResults_DataError)
			$buttonClose.remove_Click($buttonClose_Click)
			$buttonExport.remove_Click($buttonExport_Click)
			$formResults.remove_Load($FormEvent_Load)
			$formResults.remove_Load($Form_StateCorrection_Load)
			$formResults.remove_Closing($Form_StoreValues_Closing)
			$formResults.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formResults.SuspendLayout()
	#
	# formResults
	#
	$formResults.Controls.Add($textboxSearch)
	$formResults.Controls.Add($buttonSearch)
	$formResults.Controls.Add($datagridviewResults)
	$formResults.Controls.Add($buttonClose)
	$formResults.Controls.Add($buttonExport)
	$formResults.ClientSize = '784, 562'
	$formResults.MinimumSize = '600, 400'
	$formResults.Name = "formResults"
	$formResults.ShowIcon = $False
	$formResults.StartPosition = 'CenterScreen'
	$formResults.Text = "Results"
	$formResults.add_Load($FormEvent_Load)
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '13, 15'
	$textboxSearch.Name = "textboxSearch"
	$textboxSearch.Size = '677, 20'
	$textboxSearch.TabIndex = 0
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonSearch
	#
	$buttonSearch.Anchor = 'Top, Right'
	$buttonSearch.Location = '696, 13'
	$buttonSearch.Name = "buttonSearch"
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 1
	$buttonSearch.Text = "&Search"
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.AllowUserToOrderColumns = $True
	$datagridviewResults.AllowUserToResizeColumns = $False
	$datagridviewResults.AllowUserToResizeRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.AutoSizeColumnsMode = 'AllCells'
	$datagridviewResults.AutoSizeRowsMode = 'AllCells'
	$datagridviewResults.ColumnHeadersHeightSizeMode = 'DisableResizing'
	$datagridviewResults.Location = '12, 42'
	$datagridviewResults.Name = "datagridviewResults"
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.RowHeadersWidth = 23
	$datagridviewResults.RowHeadersWidthSizeMode = 'DisableResizing'
	$datagridviewResults.Size = '760, 479'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	$datagridviewResults.add_DataError($datagridviewResults_DataError)
	#
	# buttonClose
	#
	$buttonClose.Anchor = 'Bottom, Right'
	$buttonClose.Location = '697, 527'
	$buttonClose.Name = "buttonClose"
	$buttonClose.Size = '75, 23'
	$buttonClose.TabIndex = 4
	$buttonClose.Text = "&Close"
	$buttonClose.UseVisualStyleBackColor = $True
	$buttonClose.add_Click($buttonClose_Click)
	#
	# buttonExport
	#
	$buttonExport.Anchor = 'Bottom, Left'
	$buttonExport.Location = '12, 527'
	$buttonExport.Name = "buttonExport"
	$buttonExport.Size = '75, 23'
	$buttonExport.TabIndex = 3
	$buttonExport.Text = "&Export"
	$buttonExport.UseVisualStyleBackColor = $True
	$buttonExport.add_Click($buttonExport_Click)
	$formResults.ResumeLayout($false)
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formResults.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formResults.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formResults.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formResults.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formResults.ShowDialog()
}
#endregion Source: Results.psf

#Start the application
Main ($CommandLine)